package com.example.demo.services;

import java.time.Duration;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.catalina.User;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;

import com.example.demo.dao.FlightDao;
import com.example.demo.dao.UserDao;
import com.example.demo.dao.AircraftDao;
import com.example.demo.dao.AirlineDao;
import com.example.demo.dao.AirportDao;
import com.example.demo.dao.EditDao;
import com.example.demo.dto.AircraftDTO;
import com.example.demo.dto.AirlineDTO;
import com.example.demo.dto.AirportDTO;
import com.example.demo.dto.ApiResponse;
import com.example.demo.dto.FlightDTO;
import com.example.demo.dto.UserDTO;
import com.example.demo.dto.UserRespDTO;
import com.example.demo.entity.Aircraft;
import com.example.demo.entity.Airlines;
import com.example.demo.entity.Airport;
import com.example.demo.entity.Flight;
import com.example.demo.entity.UserEntity;
import com.example.demo.entity.UserRole;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class AdminServiceImpl implements AdminService {
	
	@Autowired
	private UserDao userDao;
	
	@Autowired
	private FlightDao flightDao;
	
	@Autowired
	private AirlineDao airlineDao;
	
	@Autowired
	private AircraftDao aircraftDao;
	
	@Autowired
	private AirportDao airportDao;
	
	@Autowired
	private EditDao editDao;
	
	@Autowired
	private ModelMapper modelMapper;

	@Override
	public ApiResponse addFlight(FlightDTO flight) {
		
		Airlines airlines = airlineDao.findById(flight.getAirline())
				.orElseThrow(() -> new RuntimeException("Airline not found for Id = " + flight.getAirline()));
		
		Aircraft aircraft = aircraftDao.findById(flight.getAircraftId())
				.orElseThrow(() -> new RuntimeException("Aircraft not found for Id = " + flight.getAircraftId()));
		
		Airport originAirport = airportDao.findById(flight.getOrigineAirport())
	            .orElseThrow(() -> new RuntimeException("Origin airport not found for Id = " + flight.getOrigineAirport()));

		Airport destinationAirport = airportDao.findById(flight.getDestinationAirport())
	            .orElseThrow(() -> new RuntimeException("Destination airport not found for Id: " + flight.getDestinationAirport()));
		System.out.println("destination airport : " + destinationAirport);
		Duration duration = Duration.between(flight.getDepartureTime(), flight.getArrivalTime());

		
		Flight flights = new Flight();
		
		flights.setAirline(airlines);
		flights.setAircraftId(aircraft);
		flights.setOrigineAirport(originAirport);
		flights.setDestinationAirport(destinationAirport);
		flights.setDistance(flight.getDistance());
		flights.setDirect(true);
		flights.setDuration(duration.toHours());
		
		System.out.println("flight : " + flights);
	    
		Flight saveFlight = flightDao.save(flights);
		return new ApiResponse("Added New Flight With Id = " + saveFlight.getFlightId());
	}

	@Override
	public ApiResponse addAirline(AirlineDTO airline) {
		Airlines airlines = modelMapper.map(airline, Airlines.class);
		Airlines saveAirlines = airlineDao.save(airlines);
		return new ApiResponse("Added new Airline With Id = " + saveAirlines.getAirlineId());
	}

	@Override
	public ApiResponse addAirport(AirportDTO airport) {
		Airport airports = modelMapper.map(airport, Airport.class);
		Airport saveAirports = airportDao.save(airports);
		return new ApiResponse("Added new Airline with Id = " + saveAirports.getAirportId());
	}

	@Override
	public ApiResponse addAircraft(AircraftDTO aircraftDTO) {
	    // Fetch the airline entity using the airline ID from the DTO
	    Airlines airline = airlineDao.findById(aircraftDTO.getAirline())
	            .orElseThrow(() -> new RuntimeException("Airline not found with ID: " + aircraftDTO.getAirline()));

	    Aircraft aircraft = new Aircraft();
	    aircraft.setAirline(airline);
	    aircraft.setAircraftModel(aircraftDTO.getAircraftModel());
	    aircraft.setAircraftCapacity(aircraftDTO.getAircraftCapacity());

	    // Save the new aircraft entity
	    Aircraft savedAircraft = aircraftDao.save(aircraft);
	    
	    // Return a response indicating success
	    return new ApiResponse("Added new Aircraft with ID = " + savedAircraft.getAircraftId());
	}
	
	@Override
	public ApiResponse editUser(Long id, UserDTO editProfile) {
		Optional<UserEntity> optionalUser = userDao.findById(id);
	    
	    if (optionalUser.isPresent()) {
	        UserEntity user = optionalUser.get();

	        // Update user details from the DTO
	        modelMapper.map(editProfile, user); // Assuming editProfile contains updated fields

	        // Set the role if needed (optional)
	        user.setRole(UserRole.ROLE_USER);

	        // Save the updated user entity
	        UserEntity updatedUser = userDao.save(user);

	        return new ApiResponse("User updated successfully with ID=" + updatedUser.getId());
	    } 
	    else {
	        return new ApiResponse("User not found !!!");
	    }
	}
	

	@Override
	public List<AirlineDTO> getAllAirlines() {
		return airlineDao.findAll().stream()
	            .map(airline -> modelMapper.map(airline, AirlineDTO.class))
	            .collect(Collectors.toList());
	}
	package com.example.demo.services;

	import java.time.Duration;
	import java.time.LocalDate;
	import java.util.ArrayList;
	import java.util.List;
	import java.util.Optional;
	import java.util.stream.Collectors;

	import org.apache.catalina.User;
	import org.modelmapper.ModelMapper;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Service;
	import org.springframework.ui.ModelMap;

	import com.example.demo.dao.FlightDao;
	import com.example.demo.dao.UserDao;
	import com.example.demo.dao.AircraftDao;
	import com.example.demo.dao.AirlineDao;
	import com.example.demo.dao.AirportDao;
	import com.example.demo.dao.EditDao;
	import com.example.demo.dto.AircraftDTO;
	import com.example.demo.dto.AirlineDTO;
	import com.example.demo.dto.AirportDTO;
	import com.example.demo.dto.ApiResponse;
	import com.example.demo.dto.FlightDTO;
	import com.example.demo.dto.UserDTO;
	import com.example.demo.dto.UserRespDTO;
	import com.example.demo.entity.Aircraft;
	import com.example.demo.entity.Airlines;
	import com.example.demo.entity.Airport;
	import com.example.demo.entity.Flight;
	import com.example.demo.entity.UserEntity;
	import com.example.demo.entity.UserRole;

	import jakarta.transaction.Transactional;

	@Service
	@Transactional
	public class AdminServiceImpl implements AdminService {
		
		@Autowired
		private UserDao userDao;
		
		@Autowired
		private FlightDao flightDao;
		
		@Autowired
		private AirlineDao airlineDao;
		
		@Autowired
		private AircraftDao aircraftDao;
		
		@Autowired
		private AirportDao airportDao;
		
		@Autowired
		private EditDao editDao;
		
		@Autowired
		private ModelMapper modelMapper;

		@Override
		public ApiResponse addFlight(FlightDTO flight) {
			
			Airlines airlines = airlineDao.findById(flight.getAirline())
					.orElseThrow(() -> new RuntimeException("Airline not found for Id = " + flight.getAirline()));
			
			Aircraft aircraft = aircraftDao.findById(flight.getAircraftId())
					.orElseThrow(() -> new RuntimeException("Aircraft not found for Id = " + flight.getAircraftId()));
			
			Airport originAirport = airportDao.findById(flight.getOrigineAirport())
		            .orElseThrow(() -> new RuntimeException("Origin airport not found for Id = " + flight.getOrigineAirport()));

			Airport destinationAirport = airportDao.findById(flight.getDestinationAirport())
		            .orElseThrow(() -> new RuntimeException("Destination airport not found for Id: " + flight.getDestinationAirport()));
			System.out.println("destination airport : " + destinationAirport);
			Duration duration = Duration.between(flight.getDepartureTime(), flight.getArrivalTime());

			
			Flight flights = new Flight();
			
			flights.setAirline(airlines);
			flights.setAircraftId(aircraft);
			flights.setOrigineAirport(originAirport);
			flights.setDestinationAirport(destinationAirport);
			flights.setDistance(flight.getDistance());
			flights.setDirect(true);
			flights.setDuration(duration.toHours());
			
			System.out.println("flight : " + flights);
		    
			Flight saveFlight = flightDao.save(flights);
			return new ApiResponse("Added New Flight With Id = " + saveFlight.getFlightId());
		}

		@Override
		public ApiResponse addAirline(AirlineDTO airline) {
			Airlines airlines = modelMapper.map(airline, Airlines.class);
			Airlines saveAirlines = airlineDao.save(airlines);
			return new ApiResponse("Added new Airline With Id = " + saveAirlines.getAirlineId());
		}

		@Override
		public ApiResponse addAirport(AirportDTO airport) {
			Airport airports = modelMapper.map(airport, Airport.class);
			Airport saveAirports = airportDao.save(airports);
			return new ApiResponse("Added new Airline with Id = " + saveAirports.getAirportId());
		}

		@Override
		public ApiResponse addAircraft(AircraftDTO aircraftDTO) {
		    // Fetch the airline entity using the airline ID from the DTO
		    Airlines airline = airlineDao.findById(aircraftDTO.getAirline())
		            .orElseThrow(() -> new RuntimeException("Airline not found with ID: " + aircraftDTO.getAirline()));

		    Aircraft aircraft = new Aircraft();
		    aircraft.setAirline(airline);
		    aircraft.setAircraftModel(aircraftDTO.getAircraftModel());
		    aircraft.setAircraftCapacity(aircraftDTO.getAircraftCapacity());

		    // Save the new aircraft entity
		    Aircraft savedAircraft = aircraftDao.save(aircraft);
		    
		    // Return a response indicating success
		    return new ApiResponse("Added new Aircraft with ID = " + savedAircraft.getAircraftId());
		}
		
		@Override
		public ApiResponse editUser(Long id, UserDTO editProfile) {
			Optional<UserEntity> optionalUser = userDao.findById(id);
		    
		    if (optionalUser.isPresent()) {
		        UserEntity user = optionalUser.get();

		        // Update user details from the DTO
		        modelMapper.map(editProfile, user); // Assuming editProfile contains updated fields

		        // Set the role if needed (optional)
		        user.setRole(UserRole.ROLE_USER);

		        // Save the updated user entity
		        UserEntity updatedUser = userDao.save(user);

		        return new ApiResponse("User updated successfully with ID=" + updatedUser.getId());
		    } 
		    else {
		        return new ApiResponse("User not found !!!");
		    }
		}

		@Override
		public List<AirlineDTO> getAllAirlines() {
			return airlineDao.findAll().stream()
		            .map(airline -> modelMapper.map(airline, AirlineDTO.class))
		            .collect(Collectors.toList());
		}




	}




}